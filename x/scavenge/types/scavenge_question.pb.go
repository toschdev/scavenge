// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scavenge/scavenge/scavenge_question.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ScavengeQuestion struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Question        string `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	EncryptedAnswer string `protobuf:"bytes,3,opt,name=encryptedAnswer,proto3" json:"encryptedAnswer,omitempty"`
	Bounty          uint64 `protobuf:"varint,4,opt,name=bounty,proto3" json:"bounty,omitempty"`
	Completed       bool   `protobuf:"varint,5,opt,name=completed,proto3" json:"completed,omitempty"`
	Winner          string `protobuf:"bytes,6,opt,name=winner,proto3" json:"winner,omitempty"`
}

func (m *ScavengeQuestion) Reset()         { *m = ScavengeQuestion{} }
func (m *ScavengeQuestion) String() string { return proto.CompactTextString(m) }
func (*ScavengeQuestion) ProtoMessage()    {}
func (*ScavengeQuestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_11be4d0e5138a629, []int{0}
}
func (m *ScavengeQuestion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScavengeQuestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScavengeQuestion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScavengeQuestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScavengeQuestion.Merge(m, src)
}
func (m *ScavengeQuestion) XXX_Size() int {
	return m.Size()
}
func (m *ScavengeQuestion) XXX_DiscardUnknown() {
	xxx_messageInfo_ScavengeQuestion.DiscardUnknown(m)
}

var xxx_messageInfo_ScavengeQuestion proto.InternalMessageInfo

func (m *ScavengeQuestion) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ScavengeQuestion) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

func (m *ScavengeQuestion) GetEncryptedAnswer() string {
	if m != nil {
		return m.EncryptedAnswer
	}
	return ""
}

func (m *ScavengeQuestion) GetBounty() uint64 {
	if m != nil {
		return m.Bounty
	}
	return 0
}

func (m *ScavengeQuestion) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func (m *ScavengeQuestion) GetWinner() string {
	if m != nil {
		return m.Winner
	}
	return ""
}

func init() {
	proto.RegisterType((*ScavengeQuestion)(nil), "scavenge.scavenge.ScavengeQuestion")
}

func init() {
	proto.RegisterFile("scavenge/scavenge/scavenge_question.proto", fileDescriptor_11be4d0e5138a629)
}

var fileDescriptor_11be4d0e5138a629 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2c, 0x4e, 0x4e, 0x2c,
	0x4b, 0xcd, 0x4b, 0x4f, 0xd5, 0xc7, 0x60, 0xc4, 0x17, 0x96, 0xa6, 0x16, 0x97, 0x64, 0xe6, 0xe7,
	0xe9, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x09, 0xc2, 0x24, 0xf4, 0x60, 0x0c, 0xa5, 0x03, 0x8c,
	0x5c, 0x02, 0xc1, 0x50, 0x4e, 0x20, 0x54, 0xb5, 0x90, 0x04, 0x17, 0x7b, 0x72, 0x51, 0x6a, 0x62,
	0x49, 0x7e, 0x91, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x8c, 0x2b, 0x24, 0xc5, 0xc5, 0x01,
	0x33, 0x53, 0x82, 0x09, 0x2c, 0x05, 0xe7, 0x0b, 0x69, 0x70, 0xf1, 0xa7, 0xe6, 0x25, 0x17, 0x55,
	0x16, 0x94, 0xa4, 0xa6, 0x38, 0xe6, 0x15, 0x97, 0xa7, 0x16, 0x49, 0x30, 0x83, 0x95, 0xa0, 0x0b,
	0x0b, 0x89, 0x71, 0xb1, 0x25, 0xe5, 0x97, 0xe6, 0x95, 0x54, 0x4a, 0xb0, 0x28, 0x30, 0x6a, 0xb0,
	0x04, 0x41, 0x79, 0x42, 0x32, 0x5c, 0x9c, 0xc9, 0xf9, 0xb9, 0x05, 0x39, 0xa9, 0x25, 0xa9, 0x29,
	0x12, 0xac, 0x0a, 0x8c, 0x1a, 0x1c, 0x41, 0x08, 0x01, 0x90, 0xae, 0xf2, 0xcc, 0xbc, 0xbc, 0xd4,
	0x22, 0x09, 0x36, 0xb0, 0xb1, 0x50, 0x9e, 0x93, 0xf1, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9,
	0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e,
	0xcb, 0x31, 0x44, 0x49, 0xc2, 0x43, 0xa4, 0x02, 0x11, 0x38, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49,
	0x6c, 0xe0, 0x10, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xff, 0xc5, 0x2a, 0x3e, 0x01,
	0x00, 0x00,
}

func (m *ScavengeQuestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScavengeQuestion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScavengeQuestion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Winner) > 0 {
		i -= len(m.Winner)
		copy(dAtA[i:], m.Winner)
		i = encodeVarintScavengeQuestion(dAtA, i, uint64(len(m.Winner)))
		i--
		dAtA[i] = 0x32
	}
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Bounty != 0 {
		i = encodeVarintScavengeQuestion(dAtA, i, uint64(m.Bounty))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EncryptedAnswer) > 0 {
		i -= len(m.EncryptedAnswer)
		copy(dAtA[i:], m.EncryptedAnswer)
		i = encodeVarintScavengeQuestion(dAtA, i, uint64(len(m.EncryptedAnswer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Question) > 0 {
		i -= len(m.Question)
		copy(dAtA[i:], m.Question)
		i = encodeVarintScavengeQuestion(dAtA, i, uint64(len(m.Question)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintScavengeQuestion(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintScavengeQuestion(dAtA []byte, offset int, v uint64) int {
	offset -= sovScavengeQuestion(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScavengeQuestion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovScavengeQuestion(uint64(l))
	}
	l = len(m.Question)
	if l > 0 {
		n += 1 + l + sovScavengeQuestion(uint64(l))
	}
	l = len(m.EncryptedAnswer)
	if l > 0 {
		n += 1 + l + sovScavengeQuestion(uint64(l))
	}
	if m.Bounty != 0 {
		n += 1 + sovScavengeQuestion(uint64(m.Bounty))
	}
	if m.Completed {
		n += 2
	}
	l = len(m.Winner)
	if l > 0 {
		n += 1 + l + sovScavengeQuestion(uint64(l))
	}
	return n
}

func sovScavengeQuestion(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScavengeQuestion(x uint64) (n int) {
	return sovScavengeQuestion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ScavengeQuestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScavengeQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScavengeQuestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScavengeQuestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScavengeQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScavengeQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScavengeQuestion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Question", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScavengeQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScavengeQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScavengeQuestion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Question = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedAnswer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScavengeQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScavengeQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScavengeQuestion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedAnswer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bounty", wireType)
			}
			m.Bounty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScavengeQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bounty |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScavengeQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScavengeQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScavengeQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScavengeQuestion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Winner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScavengeQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScavengeQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScavengeQuestion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScavengeQuestion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScavengeQuestion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScavengeQuestion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScavengeQuestion
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScavengeQuestion
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScavengeQuestion
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScavengeQuestion        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScavengeQuestion          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScavengeQuestion = fmt.Errorf("proto: unexpected end of group")
)
