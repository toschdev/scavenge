// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: scavenge/scavenge/tx.proto

package scavenge

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName     = "/scavenge.scavenge.Msg/UpdateParams"
	Msg_CreateQuestion_FullMethodName   = "/scavenge.scavenge.Msg/CreateQuestion"
	Msg_CommitAnswer_FullMethodName     = "/scavenge.scavenge.Msg/CommitAnswer"
	Msg_RevealAnswer_FullMethodName     = "/scavenge.scavenge.Msg/RevealAnswer"
	Msg_CompleteQuestion_FullMethodName = "/scavenge.scavenge.Msg/CompleteQuestion"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateQuestion(ctx context.Context, in *MsgCreateQuestion, opts ...grpc.CallOption) (*MsgCreateQuestionResponse, error)
	CommitAnswer(ctx context.Context, in *MsgCommitAnswer, opts ...grpc.CallOption) (*MsgCommitAnswerResponse, error)
	RevealAnswer(ctx context.Context, in *MsgRevealAnswer, opts ...grpc.CallOption) (*MsgRevealAnswerResponse, error)
	CompleteQuestion(ctx context.Context, in *MsgCompleteQuestion, opts ...grpc.CallOption) (*MsgCompleteQuestionResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateQuestion(ctx context.Context, in *MsgCreateQuestion, opts ...grpc.CallOption) (*MsgCreateQuestionResponse, error) {
	out := new(MsgCreateQuestionResponse)
	err := c.cc.Invoke(ctx, Msg_CreateQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CommitAnswer(ctx context.Context, in *MsgCommitAnswer, opts ...grpc.CallOption) (*MsgCommitAnswerResponse, error) {
	out := new(MsgCommitAnswerResponse)
	err := c.cc.Invoke(ctx, Msg_CommitAnswer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevealAnswer(ctx context.Context, in *MsgRevealAnswer, opts ...grpc.CallOption) (*MsgRevealAnswerResponse, error) {
	out := new(MsgRevealAnswerResponse)
	err := c.cc.Invoke(ctx, Msg_RevealAnswer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CompleteQuestion(ctx context.Context, in *MsgCompleteQuestion, opts ...grpc.CallOption) (*MsgCompleteQuestionResponse, error) {
	out := new(MsgCompleteQuestionResponse)
	err := c.cc.Invoke(ctx, Msg_CompleteQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateQuestion(context.Context, *MsgCreateQuestion) (*MsgCreateQuestionResponse, error)
	CommitAnswer(context.Context, *MsgCommitAnswer) (*MsgCommitAnswerResponse, error)
	RevealAnswer(context.Context, *MsgRevealAnswer) (*MsgRevealAnswerResponse, error)
	CompleteQuestion(context.Context, *MsgCompleteQuestion) (*MsgCompleteQuestionResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateQuestion(context.Context, *MsgCreateQuestion) (*MsgCreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedMsgServer) CommitAnswer(context.Context, *MsgCommitAnswer) (*MsgCommitAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitAnswer not implemented")
}
func (UnimplementedMsgServer) RevealAnswer(context.Context, *MsgRevealAnswer) (*MsgRevealAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevealAnswer not implemented")
}
func (UnimplementedMsgServer) CompleteQuestion(context.Context, *MsgCompleteQuestion) (*MsgCompleteQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteQuestion not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateQuestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateQuestion(ctx, req.(*MsgCreateQuestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CommitAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCommitAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CommitAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CommitAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CommitAnswer(ctx, req.(*MsgCommitAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevealAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevealAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevealAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RevealAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevealAnswer(ctx, req.(*MsgRevealAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CompleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCompleteQuestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CompleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CompleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CompleteQuestion(ctx, req.(*MsgCompleteQuestion))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scavenge.scavenge.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateQuestion",
			Handler:    _Msg_CreateQuestion_Handler,
		},
		{
			MethodName: "CommitAnswer",
			Handler:    _Msg_CommitAnswer_Handler,
		},
		{
			MethodName: "RevealAnswer",
			Handler:    _Msg_RevealAnswer_Handler,
		},
		{
			MethodName: "CompleteQuestion",
			Handler:    _Msg_CompleteQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scavenge/scavenge/tx.proto",
}
